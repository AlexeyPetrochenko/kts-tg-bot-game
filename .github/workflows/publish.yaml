name: Create and publish a Docker image

on:
  push:
    tags:
      - v*

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Copy docker-compose.yaml
        run: scp docker-compose.deploy.yaml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:docker-compose.yaml

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE_CONTENT }}" > .env

      - name: Create config.yaml file
        run: echo "${{ secrets.CONFIG_FILE }}" > config.yaml

      - name: Copy .env file
        run: scp .env ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:.env

      - name: Create dir /etc for config.yaml
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'mkdir -p etc'

      - name: Copy config.yaml file
        run: scp config.yaml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:etc/config.yaml

      - name: connect and pull
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin &&
            docker compose pull &&
            docker compose up -d &&
            exit"
      - name: cleanup server github actions
        if: always()
        run: rm -rf ~/.ssh docker-compose.deploy.yaml .env config.yaml
